#!/usr/local/bin/python
import logging
import os
import random
import secrets
import string

import typer


logger = logging.getLogger(__name__)
logger.addHandler(logging.StreamHandler())
logger.setLevel(os.getenv('LOG_LEVEL', 'INFO'))


def generate_password(
    length: int = 32,
    include_lowercase: bool = True,
    include_uppercase: bool = True,
    include_digits: bool = True,
    include_special: bool = True,
    special_chars: str = '[#?!@$%^&*-]',
    strip_newline: bool = False
) -> str:
    if length <= 0:
        raise ValueError('Length must be at least 1')
    password = ''
    possible_characters = ''

    logger.debug(
        f'OPTIONS:\n'
        f'Lowercase: {include_lowercase}\n'
        f'Uppercase: {include_uppercase}\n'
        f'Digits: {include_digits}\n'
        f'Special: {include_special}\n'
        f'Length: {length}\n'
        f'SpecialChars: {special_chars}\n'
        f'Strip: {strip_newline}'
    )

    # Generate available characters
    lowercase_chars = string.ascii_lowercase if include_lowercase else ''
    uppercase_chars = string.ascii_uppercase if include_uppercase else ''
    digit_chars = string.digits if include_digits else ''
    special_chars = special_chars if include_special else ''

    # Ensure one character of each enabled character set
    password += secrets.choice(lowercase_chars) if lowercase_chars else ''
    password += secrets.choice(uppercase_chars) if uppercase_chars else ''
    password += secrets.choice(digit_chars) if digit_chars else ''
    password += secrets.choice(special_chars) if special_chars else ''

    # Concat available characters
    possible_characters += lowercase_chars
    possible_characters += uppercase_chars
    possible_characters += digit_chars
    possible_characters += special_chars

    logger.debug(f'Possible characters: {possible_characters}')

    # No possible characters, error out
    if not possible_characters:
        raise ValueError(
            'ERROR: You have optioned out all available characters. '
            'Unable to generate password.'
        )

    # Generate password
    for i in range(max(0, length - len(password))):
        password += secrets.choice(possible_characters)

    # Shuffle it up to avoid starting patterns from ensuring
    # one character from each enabled character set.
    password = list(password)
    random.shuffle(password)
    password = ''.join(password)

    # Print the password, ensuring selected length
    print(password[:length], end='' if strip_newline else '\n')
    return password[:length]


if __name__ == '__main__':
    typer.run(generate_password)
